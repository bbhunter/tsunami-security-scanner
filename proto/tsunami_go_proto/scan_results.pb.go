//
// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Data models for describing scanning results.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.21.12
// source: scan_results.proto

package tsunami_go_proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Execution status of the scan.
// NEXT ID: 5
type ScanStatus int32

const (
	// Unspecified status.
	ScanStatus_SCAN_STATUS_UNSPECIFIED ScanStatus = 0
	// Scan finished successfully.
	ScanStatus_SUCCEEDED ScanStatus = 1
	// Scan finished with only a small set of selected detectors succeeded.
	ScanStatus_PARTIALLY_SUCCEEDED ScanStatus = 4
	// Scan failed.
	ScanStatus_FAILED ScanStatus = 2
	// Scan cancelled.
	ScanStatus_CANCELLED ScanStatus = 3
)

// Enum value maps for ScanStatus.
var (
	ScanStatus_name = map[int32]string{
		0: "SCAN_STATUS_UNSPECIFIED",
		1: "SUCCEEDED",
		4: "PARTIALLY_SUCCEEDED",
		2: "FAILED",
		3: "CANCELLED",
	}
	ScanStatus_value = map[string]int32{
		"SCAN_STATUS_UNSPECIFIED": 0,
		"SUCCEEDED":               1,
		"PARTIALLY_SUCCEEDED":     4,
		"FAILED":                  2,
		"CANCELLED":               3,
	}
)

func (x ScanStatus) Enum() *ScanStatus {
	p := new(ScanStatus)
	*p = x
	return p
}

func (x ScanStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScanStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_scan_results_proto_enumTypes[0].Descriptor()
}

func (ScanStatus) Type() protoreflect.EnumType {
	return &file_scan_results_proto_enumTypes[0]
}

func (x ScanStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScanStatus.Descriptor instead.
func (ScanStatus) EnumDescriptor() ([]byte, []int) {
	return file_scan_results_proto_rawDescGZIP(), []int{0}
}

// A single vulnerability finding for a specific service.
type ScanFinding struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Information about the scanned target.
	TargetInfo *TargetInfo `protobuf:"bytes,1,opt,name=target_info,json=targetInfo,proto3" json:"target_info,omitempty"`
	// Information about the scanned network service.
	NetworkService *NetworkService `protobuf:"bytes,2,opt,name=network_service,json=networkService,proto3" json:"network_service,omitempty"`
	// Details about the detected vulnerability.
	Vulnerability *Vulnerability `protobuf:"bytes,3,opt,name=vulnerability,proto3" json:"vulnerability,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ScanFinding) Reset() {
	*x = ScanFinding{}
	mi := &file_scan_results_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScanFinding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScanFinding) ProtoMessage() {}

func (x *ScanFinding) ProtoReflect() protoreflect.Message {
	mi := &file_scan_results_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScanFinding.ProtoReflect.Descriptor instead.
func (*ScanFinding) Descriptor() ([]byte, []int) {
	return file_scan_results_proto_rawDescGZIP(), []int{0}
}

func (x *ScanFinding) GetTargetInfo() *TargetInfo {
	if x != nil {
		return x.TargetInfo
	}
	return nil
}

func (x *ScanFinding) GetNetworkService() *NetworkService {
	if x != nil {
		return x.NetworkService
	}
	return nil
}

func (x *ScanFinding) GetVulnerability() *Vulnerability {
	if x != nil {
		return x.Vulnerability
	}
	return nil
}

// Full scanning results.
// NEXT ID: 9
type ScanResults struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Status of this scan.
	ScanStatus ScanStatus `protobuf:"varint,1,opt,name=scan_status,json=scanStatus,proto3,enum=tsunami.proto.ScanStatus" json:"scan_status,omitempty"`
	// Detailed message for the scan status.
	StatusMessage string `protobuf:"bytes,6,opt,name=status_message,json=statusMessage,proto3" json:"status_message,omitempty"`
	// Reports whether the target was alive during the scan.
	// A target is considered alive if at least one network service was identified
	// or at least one vulnerability was detected.
	TargetAlive bool `protobuf:"varint,8,opt,name=target_alive,json=targetAlive,proto3" json:"target_alive,omitempty"`
	// All findings from this scan.
	ScanFindings []*ScanFinding `protobuf:"bytes,2,rep,name=scan_findings,json=scanFindings,proto3" json:"scan_findings,omitempty"`
	// Time when this scan was started.
	ScanStartTimestamp *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=scan_start_timestamp,json=scanStartTimestamp,proto3" json:"scan_start_timestamp,omitempty"`
	// Duration of the full scan.
	ScanDuration *durationpb.Duration `protobuf:"bytes,4,opt,name=scan_duration,json=scanDuration,proto3" json:"scan_duration,omitempty"`
	// Detection reports from all triggered Tsunami detection plugins.
	FullDetectionReports *FullDetectionReports `protobuf:"bytes,5,opt,name=full_detection_reports,json=fullDetectionReports,proto3" json:"full_detection_reports,omitempty"`
	// Reconnaissance reports from the fingerprinting stage.
	ReconnaissanceReport *ReconnaissanceReport `protobuf:"bytes,7,opt,name=reconnaissance_report,json=reconnaissanceReport,proto3" json:"reconnaissance_report,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *ScanResults) Reset() {
	*x = ScanResults{}
	mi := &file_scan_results_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScanResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScanResults) ProtoMessage() {}

func (x *ScanResults) ProtoReflect() protoreflect.Message {
	mi := &file_scan_results_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScanResults.ProtoReflect.Descriptor instead.
func (*ScanResults) Descriptor() ([]byte, []int) {
	return file_scan_results_proto_rawDescGZIP(), []int{1}
}

func (x *ScanResults) GetScanStatus() ScanStatus {
	if x != nil {
		return x.ScanStatus
	}
	return ScanStatus_SCAN_STATUS_UNSPECIFIED
}

func (x *ScanResults) GetStatusMessage() string {
	if x != nil {
		return x.StatusMessage
	}
	return ""
}

func (x *ScanResults) GetTargetAlive() bool {
	if x != nil {
		return x.TargetAlive
	}
	return false
}

func (x *ScanResults) GetScanFindings() []*ScanFinding {
	if x != nil {
		return x.ScanFindings
	}
	return nil
}

func (x *ScanResults) GetScanStartTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.ScanStartTimestamp
	}
	return nil
}

func (x *ScanResults) GetScanDuration() *durationpb.Duration {
	if x != nil {
		return x.ScanDuration
	}
	return nil
}

func (x *ScanResults) GetFullDetectionReports() *FullDetectionReports {
	if x != nil {
		return x.FullDetectionReports
	}
	return nil
}

func (x *ScanResults) GetReconnaissanceReport() *ReconnaissanceReport {
	if x != nil {
		return x.ReconnaissanceReport
	}
	return nil
}

// Full detection reports from all triggered Tsunami detection plugins.
type FullDetectionReports struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	DetectionReports []*DetectionReport     `protobuf:"bytes,1,rep,name=detection_reports,json=detectionReports,proto3" json:"detection_reports,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *FullDetectionReports) Reset() {
	*x = FullDetectionReports{}
	mi := &file_scan_results_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FullDetectionReports) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FullDetectionReports) ProtoMessage() {}

func (x *FullDetectionReports) ProtoReflect() protoreflect.Message {
	mi := &file_scan_results_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FullDetectionReports.ProtoReflect.Descriptor instead.
func (*FullDetectionReports) Descriptor() ([]byte, []int) {
	return file_scan_results_proto_rawDescGZIP(), []int{2}
}

func (x *FullDetectionReports) GetDetectionReports() []*DetectionReport {
	if x != nil {
		return x.DetectionReports
	}
	return nil
}

var File_scan_results_proto protoreflect.FileDescriptor

var file_scan_results_proto_rawDesc = string([]byte{
	0x0a, 0x12, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x74, 0x73, 0x75, 0x6e, 0x61, 0x6d, 0x69, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x72, 0x65,
	0x63, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x73, 0x73, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x13, 0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd5, 0x01, 0x0a, 0x0b, 0x53, 0x63, 0x61, 0x6e,
	0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x3a, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74,
	0x73, 0x75, 0x6e, 0x61, 0x6d, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x46, 0x0a, 0x0f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74,
	0x73, 0x75, 0x6e, 0x61, 0x6d, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x0e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x42, 0x0a, 0x0d, 0x76,
	0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x73, 0x75, 0x6e, 0x61, 0x6d, 0x69, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x52, 0x0d, 0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x22,
	0x97, 0x04, 0x0a, 0x0b, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12,
	0x3a, 0x0a, 0x0b, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x74, 0x73, 0x75, 0x6e, 0x61, 0x6d, 0x69, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x0a, 0x73, 0x63, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x6c, 0x69,
	0x76, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x41, 0x6c, 0x69, 0x76, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x66, 0x69,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74,
	0x73, 0x75, 0x6e, 0x61, 0x6d, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x61,
	0x6e, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x73, 0x63, 0x61, 0x6e, 0x46, 0x69,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x4c, 0x0a, 0x14, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x12, 0x73, 0x63, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x3e, 0x0a, 0x0d, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x73, 0x63, 0x61, 0x6e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x59, 0x0a, 0x16, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x64, 0x65, 0x74,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x73, 0x75, 0x6e, 0x61, 0x6d, 0x69, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x14, 0x66, 0x75, 0x6c, 0x6c, 0x44,
	0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12,
	0x58, 0x0a, 0x15, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x73, 0x73, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x74, 0x73, 0x75, 0x6e, 0x61, 0x6d, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x73, 0x73, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x14, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x73, 0x73, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x63, 0x0a, 0x14, 0x46, 0x75, 0x6c,
	0x6c, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x12, 0x4b, 0x0a, 0x11, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74,
	0x73, 0x75, 0x6e, 0x61, 0x6d, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x74,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x10, 0x64, 0x65,
	0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2a, 0x6c,
	0x0a, 0x0a, 0x53, 0x63, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x17,
	0x53, 0x43, 0x41, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x55, 0x43,
	0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x41, 0x52, 0x54,
	0x49, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10,
	0x04, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0d, 0x0a,
	0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x42, 0x72, 0x0a, 0x18,
	0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x73, 0x75, 0x6e, 0x61,
	0x6d, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x11, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x50, 0x01, 0x5a, 0x41, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x74, 0x73, 0x75, 0x6e, 0x61, 0x6d, 0x69, 0x2d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x2d, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x74, 0x73, 0x75, 0x6e, 0x61, 0x6d, 0x69, 0x5f, 0x67, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_scan_results_proto_rawDescOnce sync.Once
	file_scan_results_proto_rawDescData []byte
)

func file_scan_results_proto_rawDescGZIP() []byte {
	file_scan_results_proto_rawDescOnce.Do(func() {
		file_scan_results_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_scan_results_proto_rawDesc), len(file_scan_results_proto_rawDesc)))
	})
	return file_scan_results_proto_rawDescData
}

var file_scan_results_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_scan_results_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_scan_results_proto_goTypes = []any{
	(ScanStatus)(0),               // 0: tsunami.proto.ScanStatus
	(*ScanFinding)(nil),           // 1: tsunami.proto.ScanFinding
	(*ScanResults)(nil),           // 2: tsunami.proto.ScanResults
	(*FullDetectionReports)(nil),  // 3: tsunami.proto.FullDetectionReports
	(*TargetInfo)(nil),            // 4: tsunami.proto.TargetInfo
	(*NetworkService)(nil),        // 5: tsunami.proto.NetworkService
	(*Vulnerability)(nil),         // 6: tsunami.proto.Vulnerability
	(*timestamppb.Timestamp)(nil), // 7: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),   // 8: google.protobuf.Duration
	(*ReconnaissanceReport)(nil),  // 9: tsunami.proto.ReconnaissanceReport
	(*DetectionReport)(nil),       // 10: tsunami.proto.DetectionReport
}
var file_scan_results_proto_depIdxs = []int32{
	4,  // 0: tsunami.proto.ScanFinding.target_info:type_name -> tsunami.proto.TargetInfo
	5,  // 1: tsunami.proto.ScanFinding.network_service:type_name -> tsunami.proto.NetworkService
	6,  // 2: tsunami.proto.ScanFinding.vulnerability:type_name -> tsunami.proto.Vulnerability
	0,  // 3: tsunami.proto.ScanResults.scan_status:type_name -> tsunami.proto.ScanStatus
	1,  // 4: tsunami.proto.ScanResults.scan_findings:type_name -> tsunami.proto.ScanFinding
	7,  // 5: tsunami.proto.ScanResults.scan_start_timestamp:type_name -> google.protobuf.Timestamp
	8,  // 6: tsunami.proto.ScanResults.scan_duration:type_name -> google.protobuf.Duration
	3,  // 7: tsunami.proto.ScanResults.full_detection_reports:type_name -> tsunami.proto.FullDetectionReports
	9,  // 8: tsunami.proto.ScanResults.reconnaissance_report:type_name -> tsunami.proto.ReconnaissanceReport
	10, // 9: tsunami.proto.FullDetectionReports.detection_reports:type_name -> tsunami.proto.DetectionReport
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_scan_results_proto_init() }
func file_scan_results_proto_init() {
	if File_scan_results_proto != nil {
		return
	}
	file_detection_proto_init()
	file_network_service_proto_init()
	file_reconnaissance_proto_init()
	file_vulnerability_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_scan_results_proto_rawDesc), len(file_scan_results_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_scan_results_proto_goTypes,
		DependencyIndexes: file_scan_results_proto_depIdxs,
		EnumInfos:         file_scan_results_proto_enumTypes,
		MessageInfos:      file_scan_results_proto_msgTypes,
	}.Build()
	File_scan_results_proto = out.File
	file_scan_results_proto_goTypes = nil
	file_scan_results_proto_depIdxs = nil
}
