//
// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Data models for describing a network service.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.21.12
// source: network_service.proto

package tsunami_go_proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// General information about a network service running on a target.
type NetworkService struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The network endpoint where this network service is served.
	NetworkEndpoint *NetworkEndpoint `protobuf:"bytes,1,opt,name=network_endpoint,json=networkEndpoint,proto3" json:"network_endpoint,omitempty"`
	// The transport layer protocol used by the service.
	TransportProtocol TransportProtocol `protobuf:"varint,2,opt,name=transport_protocol,json=transportProtocol,proto3,enum=tsunami.proto.TransportProtocol" json:"transport_protocol,omitempty"`
	// The name of the network service, following convention in RFC6335. Examples
	// are like http, telnet, ssh, etc.
	ServiceName string `protobuf:"bytes,3,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// The software that provides the service behind the port.
	Software *Software `protobuf:"bytes,4,opt,name=software,proto3" json:"software,omitempty"`
	// The complete set of versions of the software.
	VersionSet *VersionSet `protobuf:"bytes,5,opt,name=version_set,json=versionSet,proto3" json:"version_set,omitempty"`
	// Banners generated by the service.
	Banner []string `protobuf:"bytes,6,rep,name=banner,proto3" json:"banner,omitempty"`
	// Context information about this network service.
	ServiceContext *ServiceContext `protobuf:"bytes,7,opt,name=service_context,json=serviceContext,proto3" json:"service_context,omitempty"`
	// The detected Common Platform Enumeration (CPE) name for service,
	// in the uri binding representation, like: cpe:/a:openbsd:openssh:8.4p1
	Cpes []string `protobuf:"bytes,8,rep,name=cpes,proto3" json:"cpes,omitempty"`
	// List of supported SSL versions (e.g. TLSv1, SSLv3, ...) on the service.
	SupportedSslVersions []string `protobuf:"bytes,9,rep,name=supported_ssl_versions,json=supportedSslVersions,proto3" json:"supported_ssl_versions,omitempty"`
	// List of supported HTTP methods (e.g. POST, GET, ...) on the service.
	SupportedHttpMethods []string `protobuf:"bytes,10,rep,name=supported_http_methods,json=supportedHttpMethods,proto3" json:"supported_http_methods,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *NetworkService) Reset() {
	*x = NetworkService{}
	mi := &file_network_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkService) ProtoMessage() {}

func (x *NetworkService) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkService.ProtoReflect.Descriptor instead.
func (*NetworkService) Descriptor() ([]byte, []int) {
	return file_network_service_proto_rawDescGZIP(), []int{0}
}

func (x *NetworkService) GetNetworkEndpoint() *NetworkEndpoint {
	if x != nil {
		return x.NetworkEndpoint
	}
	return nil
}

func (x *NetworkService) GetTransportProtocol() TransportProtocol {
	if x != nil {
		return x.TransportProtocol
	}
	return TransportProtocol_TRANSPORT_PROTOCOL_UNSPECIFIED
}

func (x *NetworkService) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *NetworkService) GetSoftware() *Software {
	if x != nil {
		return x.Software
	}
	return nil
}

func (x *NetworkService) GetVersionSet() *VersionSet {
	if x != nil {
		return x.VersionSet
	}
	return nil
}

func (x *NetworkService) GetBanner() []string {
	if x != nil {
		return x.Banner
	}
	return nil
}

func (x *NetworkService) GetServiceContext() *ServiceContext {
	if x != nil {
		return x.ServiceContext
	}
	return nil
}

func (x *NetworkService) GetCpes() []string {
	if x != nil {
		return x.Cpes
	}
	return nil
}

func (x *NetworkService) GetSupportedSslVersions() []string {
	if x != nil {
		return x.SupportedSslVersions
	}
	return nil
}

func (x *NetworkService) GetSupportedHttpMethods() []string {
	if x != nil {
		return x.SupportedHttpMethods
	}
	return nil
}

// Context information about a specific network service.
type ServiceContext struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Context:
	//
	//	*ServiceContext_WebServiceContext
	Context       isServiceContext_Context `protobuf_oneof:"context"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ServiceContext) Reset() {
	*x = ServiceContext{}
	mi := &file_network_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceContext) ProtoMessage() {}

func (x *ServiceContext) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceContext.ProtoReflect.Descriptor instead.
func (*ServiceContext) Descriptor() ([]byte, []int) {
	return file_network_service_proto_rawDescGZIP(), []int{1}
}

func (x *ServiceContext) GetContext() isServiceContext_Context {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *ServiceContext) GetWebServiceContext() *WebServiceContext {
	if x != nil {
		if x, ok := x.Context.(*ServiceContext_WebServiceContext); ok {
			return x.WebServiceContext
		}
	}
	return nil
}

type isServiceContext_Context interface {
	isServiceContext_Context()
}

type ServiceContext_WebServiceContext struct {
	WebServiceContext *WebServiceContext `protobuf:"bytes,1,opt,name=web_service_context,json=webServiceContext,proto3,oneof"`
}

func (*ServiceContext_WebServiceContext) isServiceContext_Context() {}

// Context information about a web application.
// NEXT ID: 5
type WebServiceContext struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The root path of the hosted web application.
	ApplicationRoot string `protobuf:"bytes,1,opt,name=application_root,json=applicationRoot,proto3" json:"application_root,omitempty"`
	// The web application that is serving under the application root.
	Software *Software `protobuf:"bytes,2,opt,name=software,proto3" json:"software,omitempty"`
	// The detected versions of the web application.
	VersionSet *VersionSet `protobuf:"bytes,3,opt,name=version_set,json=versionSet,proto3" json:"version_set,omitempty"`
	// Fingerprinter's crawling results for this web service.
	CrawlResults  []*CrawlResult `protobuf:"bytes,4,rep,name=crawl_results,json=crawlResults,proto3" json:"crawl_results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WebServiceContext) Reset() {
	*x = WebServiceContext{}
	mi := &file_network_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WebServiceContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebServiceContext) ProtoMessage() {}

func (x *WebServiceContext) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebServiceContext.ProtoReflect.Descriptor instead.
func (*WebServiceContext) Descriptor() ([]byte, []int) {
	return file_network_service_proto_rawDescGZIP(), []int{2}
}

func (x *WebServiceContext) GetApplicationRoot() string {
	if x != nil {
		return x.ApplicationRoot
	}
	return ""
}

func (x *WebServiceContext) GetSoftware() *Software {
	if x != nil {
		return x.Software
	}
	return nil
}

func (x *WebServiceContext) GetVersionSet() *VersionSet {
	if x != nil {
		return x.VersionSet
	}
	return nil
}

func (x *WebServiceContext) GetCrawlResults() []*CrawlResult {
	if x != nil {
		return x.CrawlResults
	}
	return nil
}

var File_network_service_proto protoreflect.FileDescriptor

var file_network_service_proto_rawDesc = string([]byte{
	0x0a, 0x15, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x74, 0x73, 0x75, 0x6e, 0x61, 0x6d, 0x69,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x63, 0x72, 0x61, 0x77, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa0, 0x04, 0x0a, 0x0e, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x49, 0x0a, 0x10, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x73, 0x75, 0x6e, 0x61, 0x6d, 0x69, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x52, 0x0f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x4f, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x20, 0x2e, 0x74, 0x73, 0x75, 0x6e, 0x61, 0x6d, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x73, 0x6f, 0x66, 0x74,
	0x77, 0x61, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x73, 0x75,
	0x6e, 0x61, 0x6d, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x77,
	0x61, 0x72, 0x65, 0x52, 0x08, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x12, 0x3a, 0x0a,
	0x0b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x73, 0x75, 0x6e, 0x61, 0x6d, 0x69, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x52, 0x0a, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x61, 0x6e,
	0x6e, 0x65, 0x72, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x62, 0x61, 0x6e, 0x6e, 0x65,
	0x72, 0x12, 0x46, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x73, 0x75,
	0x6e, 0x61, 0x6d, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x70, 0x65,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x63, 0x70, 0x65, 0x73, 0x12, 0x34, 0x0a,
	0x16, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x73, 0x6c, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x53, 0x73, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x5f, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x14, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x48, 0x74,
	0x74, 0x70, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x22, 0x6f, 0x0a, 0x0e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x52, 0x0a, 0x13, 0x77,
	0x65, 0x62, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x73, 0x75, 0x6e, 0x61,
	0x6d, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x65, 0x62, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x48, 0x00, 0x52, 0x11, 0x77, 0x65,
	0x62, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x42,
	0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0xf0, 0x01, 0x0a, 0x11, 0x57,
	0x65, 0x62, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x29, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x72, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x33, 0x0a, 0x08, 0x73,
	0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x74, 0x73, 0x75, 0x6e, 0x61, 0x6d, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x6f,
	0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x52, 0x08, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65,
	0x12, 0x3a, 0x0a, 0x0b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x73, 0x75, 0x6e, 0x61, 0x6d, 0x69, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74,
	0x52, 0x0a, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x12, 0x3f, 0x0a, 0x0d,
	0x63, 0x72, 0x61, 0x77, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x73, 0x75, 0x6e, 0x61, 0x6d, 0x69, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x0c, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x42, 0x75, 0x0a,
	0x18, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x73, 0x75, 0x6e,
	0x61, 0x6d, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x14, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x50,
	0x01, 0x5a, 0x41, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x74, 0x73, 0x75, 0x6e, 0x61, 0x6d, 0x69, 0x2d, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x2d, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x73, 0x75, 0x6e, 0x61, 0x6d, 0x69, 0x5f, 0x67, 0x6f, 0x5f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_network_service_proto_rawDescOnce sync.Once
	file_network_service_proto_rawDescData []byte
)

func file_network_service_proto_rawDescGZIP() []byte {
	file_network_service_proto_rawDescOnce.Do(func() {
		file_network_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_network_service_proto_rawDesc), len(file_network_service_proto_rawDesc)))
	})
	return file_network_service_proto_rawDescData
}

var file_network_service_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_network_service_proto_goTypes = []any{
	(*NetworkService)(nil),    // 0: tsunami.proto.NetworkService
	(*ServiceContext)(nil),    // 1: tsunami.proto.ServiceContext
	(*WebServiceContext)(nil), // 2: tsunami.proto.WebServiceContext
	(*NetworkEndpoint)(nil),   // 3: tsunami.proto.NetworkEndpoint
	(TransportProtocol)(0),    // 4: tsunami.proto.TransportProtocol
	(*Software)(nil),          // 5: tsunami.proto.Software
	(*VersionSet)(nil),        // 6: tsunami.proto.VersionSet
	(*CrawlResult)(nil),       // 7: tsunami.proto.CrawlResult
}
var file_network_service_proto_depIdxs = []int32{
	3, // 0: tsunami.proto.NetworkService.network_endpoint:type_name -> tsunami.proto.NetworkEndpoint
	4, // 1: tsunami.proto.NetworkService.transport_protocol:type_name -> tsunami.proto.TransportProtocol
	5, // 2: tsunami.proto.NetworkService.software:type_name -> tsunami.proto.Software
	6, // 3: tsunami.proto.NetworkService.version_set:type_name -> tsunami.proto.VersionSet
	1, // 4: tsunami.proto.NetworkService.service_context:type_name -> tsunami.proto.ServiceContext
	2, // 5: tsunami.proto.ServiceContext.web_service_context:type_name -> tsunami.proto.WebServiceContext
	5, // 6: tsunami.proto.WebServiceContext.software:type_name -> tsunami.proto.Software
	6, // 7: tsunami.proto.WebServiceContext.version_set:type_name -> tsunami.proto.VersionSet
	7, // 8: tsunami.proto.WebServiceContext.crawl_results:type_name -> tsunami.proto.CrawlResult
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_network_service_proto_init() }
func file_network_service_proto_init() {
	if File_network_service_proto != nil {
		return
	}
	file_network_proto_init()
	file_software_proto_init()
	file_web_crawl_proto_init()
	file_network_service_proto_msgTypes[1].OneofWrappers = []any{
		(*ServiceContext_WebServiceContext)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_network_service_proto_rawDesc), len(file_network_service_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_network_service_proto_goTypes,
		DependencyIndexes: file_network_service_proto_depIdxs,
		MessageInfos:      file_network_service_proto_msgTypes,
	}.Build()
	File_network_service_proto = out.File
	file_network_service_proto_goTypes = nil
	file_network_service_proto_depIdxs = nil
}
