//
// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Data models for describing a software.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.21.12
// source: software.proto

package tsunami_go_proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Type of the Version message, identifying an ordinary software version or a
// sentinel MINIMUM/MAXIMUM version. See comments below for what is a sentinel
// version.
type Version_VersionType int32

const (
	Version_VERSION_TYPE_UNSPECIFIED Version_VersionType = 0
	// A normal software version.
	Version_NORMAL Version_VersionType = 1
	// A sentinel version representing negative infinity, i.e. MINIMUM version
	// is less than any NORMAL and MAXIMUM versions.
	Version_MINIMUM Version_VersionType = 2
	// A sentinel version representing positive infinity, i.e. MAXIMUM version
	// is greater than any NORMAL and MINIMUM versions.
	Version_MAXIMUM Version_VersionType = 3
)

// Enum value maps for Version_VersionType.
var (
	Version_VersionType_name = map[int32]string{
		0: "VERSION_TYPE_UNSPECIFIED",
		1: "NORMAL",
		2: "MINIMUM",
		3: "MAXIMUM",
	}
	Version_VersionType_value = map[string]int32{
		"VERSION_TYPE_UNSPECIFIED": 0,
		"NORMAL":                   1,
		"MINIMUM":                  2,
		"MAXIMUM":                  3,
	}
)

func (x Version_VersionType) Enum() *Version_VersionType {
	p := new(Version_VersionType)
	*p = x
	return p
}

func (x Version_VersionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Version_VersionType) Descriptor() protoreflect.EnumDescriptor {
	return file_software_proto_enumTypes[0].Descriptor()
}

func (Version_VersionType) Type() protoreflect.EnumType {
	return &file_software_proto_enumTypes[0]
}

func (x Version_VersionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Version_VersionType.Descriptor instead.
func (Version_VersionType) EnumDescriptor() ([]byte, []int) {
	return file_software_proto_rawDescGZIP(), []int{0, 0}
}

// Whether the range endpoint is inclusive or exclusive.
type VersionRange_Inclusiveness int32

const (
	VersionRange_INCLUSIVENESS_UNSPECIFIED VersionRange_Inclusiveness = 0
	VersionRange_INCLUSIVE                 VersionRange_Inclusiveness = 1
	VersionRange_EXCLUSIVE                 VersionRange_Inclusiveness = 2
)

// Enum value maps for VersionRange_Inclusiveness.
var (
	VersionRange_Inclusiveness_name = map[int32]string{
		0: "INCLUSIVENESS_UNSPECIFIED",
		1: "INCLUSIVE",
		2: "EXCLUSIVE",
	}
	VersionRange_Inclusiveness_value = map[string]int32{
		"INCLUSIVENESS_UNSPECIFIED": 0,
		"INCLUSIVE":                 1,
		"EXCLUSIVE":                 2,
	}
)

func (x VersionRange_Inclusiveness) Enum() *VersionRange_Inclusiveness {
	p := new(VersionRange_Inclusiveness)
	*p = x
	return p
}

func (x VersionRange_Inclusiveness) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VersionRange_Inclusiveness) Descriptor() protoreflect.EnumDescriptor {
	return file_software_proto_enumTypes[1].Descriptor()
}

func (VersionRange_Inclusiveness) Type() protoreflect.EnumType {
	return &file_software_proto_enumTypes[1]
}

func (x VersionRange_Inclusiveness) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VersionRange_Inclusiveness.Descriptor instead.
func (VersionRange_Inclusiveness) EnumDescriptor() ([]byte, []int) {
	return file_software_proto_rawDescGZIP(), []int{1, 0}
}

// The exact version of a software.
type Version struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Distinguishes between sentinel MIN/MAX versions and normal versions.
	Type Version_VersionType `protobuf:"varint,1,opt,name=type,proto3,enum=tsunami.proto.Version_VersionType" json:"type,omitempty"`
	// Human readable version number, e.g. 1.0.3. This is set only when type is
	// NORMAL. Tsunami uses raw string to represent a version number instead of
	// any structured messages in order to handle different kinds of version
	// schemes. Tsunami will tokenize this version string and store tokens
	// internally. When performing version comparisons, Tsunami follows the
	// precedence defined by Semantic Versioning (semver.org). More details can be
	// found in Tsunami's internal Version class.
	FullVersionString string `protobuf:"bytes,2,opt,name=full_version_string,json=fullVersionString,proto3" json:"full_version_string,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Version) Reset() {
	*x = Version{}
	mi := &file_software_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Version) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Version) ProtoMessage() {}

func (x *Version) ProtoReflect() protoreflect.Message {
	mi := &file_software_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Version.ProtoReflect.Descriptor instead.
func (*Version) Descriptor() ([]byte, []int) {
	return file_software_proto_rawDescGZIP(), []int{0}
}

func (x *Version) GetType() Version_VersionType {
	if x != nil {
		return x.Type
	}
	return Version_VERSION_TYPE_UNSPECIFIED
}

func (x *Version) GetFullVersionString() string {
	if x != nil {
		return x.FullVersionString
	}
	return ""
}

// An inclusive range of versions for a software.
type VersionRange struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Minimum version that belongs in the range.
	MinVersion *Version `protobuf:"bytes,1,opt,name=min_version,json=minVersion,proto3" json:"min_version,omitempty"`
	// Inclusiveness of the min_version. When min_version points to negative
	// infinity, this value will always be EXCLUSIVE to matching the
	// representation of (-inf, 1.0]. Note that negative infinity version should
	// ***NOT*** be compared with a version range as it is just a bogus sentinel
	// version without any meaning.
	MinVersionInclusiveness VersionRange_Inclusiveness `protobuf:"varint,2,opt,name=min_version_inclusiveness,json=minVersionInclusiveness,proto3,enum=tsunami.proto.VersionRange_Inclusiveness" json:"min_version_inclusiveness,omitempty"`
	// Maximum version that belongs in the range.
	MaxVersion *Version `protobuf:"bytes,3,opt,name=max_version,json=maxVersion,proto3" json:"max_version,omitempty"`
	// Inclusiveness of the max_version. When max_version points to positive
	// infinity, this value will always be EXCLUSIVE to matching the
	// representation of [1.0, inf). Note that positive infinity version should
	// ***NOT*** be compared with a version range as it is just a bogus sentinel
	// version without any meaning.
	MaxVersionInclusiveness VersionRange_Inclusiveness `protobuf:"varint,4,opt,name=max_version_inclusiveness,json=maxVersionInclusiveness,proto3,enum=tsunami.proto.VersionRange_Inclusiveness" json:"max_version_inclusiveness,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *VersionRange) Reset() {
	*x = VersionRange{}
	mi := &file_software_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VersionRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionRange) ProtoMessage() {}

func (x *VersionRange) ProtoReflect() protoreflect.Message {
	mi := &file_software_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionRange.ProtoReflect.Descriptor instead.
func (*VersionRange) Descriptor() ([]byte, []int) {
	return file_software_proto_rawDescGZIP(), []int{1}
}

func (x *VersionRange) GetMinVersion() *Version {
	if x != nil {
		return x.MinVersion
	}
	return nil
}

func (x *VersionRange) GetMinVersionInclusiveness() VersionRange_Inclusiveness {
	if x != nil {
		return x.MinVersionInclusiveness
	}
	return VersionRange_INCLUSIVENESS_UNSPECIFIED
}

func (x *VersionRange) GetMaxVersion() *Version {
	if x != nil {
		return x.MaxVersion
	}
	return nil
}

func (x *VersionRange) GetMaxVersionInclusiveness() VersionRange_Inclusiveness {
	if x != nil {
		return x.MaxVersionInclusiveness
	}
	return VersionRange_INCLUSIVENESS_UNSPECIFIED
}

// A set of Versions and VersionRanges that completely describes a set of
// software releases, e.g. {3.9.1, 3.9.3, [4.7.1, 4.7.8], 4.8}
type VersionSet struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Versions      []*Version             `protobuf:"bytes,1,rep,name=versions,proto3" json:"versions,omitempty"`
	VersionRanges []*VersionRange        `protobuf:"bytes,2,rep,name=version_ranges,json=versionRanges,proto3" json:"version_ranges,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VersionSet) Reset() {
	*x = VersionSet{}
	mi := &file_software_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VersionSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionSet) ProtoMessage() {}

func (x *VersionSet) ProtoReflect() protoreflect.Message {
	mi := &file_software_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionSet.ProtoReflect.Descriptor instead.
func (*VersionSet) Descriptor() ([]byte, []int) {
	return file_software_proto_rawDescGZIP(), []int{2}
}

func (x *VersionSet) GetVersions() []*Version {
	if x != nil {
		return x.Versions
	}
	return nil
}

func (x *VersionSet) GetVersionRanges() []*VersionRange {
	if x != nil {
		return x.VersionRanges
	}
	return nil
}

// A structured description about a software.
type Software struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of this software.
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Software) Reset() {
	*x = Software{}
	mi := &file_software_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Software) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Software) ProtoMessage() {}

func (x *Software) ProtoReflect() protoreflect.Message {
	mi := &file_software_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Software.ProtoReflect.Descriptor instead.
func (*Software) Descriptor() ([]byte, []int) {
	return file_software_proto_rawDescGZIP(), []int{3}
}

func (x *Software) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

var File_software_proto protoreflect.FileDescriptor

var file_software_proto_rawDesc = string([]byte{
	0x0a, 0x0e, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0d, 0x74, 0x73, 0x75, 0x6e, 0x61, 0x6d, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xc4, 0x01, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x74, 0x73, 0x75, 0x6e,
	0x61, 0x6d, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x66, 0x75, 0x6c, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x22, 0x51, 0x0a, 0x0b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07,
	0x4d, 0x49, 0x4e, 0x49, 0x4d, 0x55, 0x4d, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x41, 0x58,
	0x49, 0x4d, 0x55, 0x4d, 0x10, 0x03, 0x22, 0x9c, 0x03, 0x0a, 0x0c, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x37, 0x0a, 0x0b, 0x6d, 0x69, 0x6e, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74,
	0x73, 0x75, 0x6e, 0x61, 0x6d, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x65, 0x0a, 0x19, 0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x74, 0x73, 0x75, 0x6e, 0x61, 0x6d, 0x69, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x2e, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x17,
	0x6d, 0x69, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73,
	0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x37, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74,
	0x73, 0x75, 0x6e, 0x61, 0x6d, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x65, 0x0a, 0x19, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x74, 0x73, 0x75, 0x6e, 0x61, 0x6d, 0x69, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x2e, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x17,
	0x6d, 0x61, 0x78, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73,
	0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x22, 0x4c, 0x0a, 0x0d, 0x49, 0x6e, 0x63, 0x6c, 0x75,
	0x73, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x4e, 0x43, 0x4c,
	0x55, 0x53, 0x49, 0x56, 0x45, 0x4e, 0x45, 0x53, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x4e, 0x43, 0x4c, 0x55,
	0x53, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x58, 0x43, 0x4c, 0x55, 0x53,
	0x49, 0x56, 0x45, 0x10, 0x02, 0x22, 0x84, 0x01, 0x0a, 0x0a, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x74, 0x12, 0x32, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x73, 0x75, 0x6e, 0x61, 0x6d, 0x69,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x42, 0x0a, 0x0e, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x74, 0x73, 0x75, 0x6e, 0x61, 0x6d, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0d, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x22, 0x1e, 0x0a, 0x08,
	0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x6f, 0x0a, 0x18,
	0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x73, 0x75, 0x6e, 0x61,
	0x6d, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x0e, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61,
	0x72, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x50, 0x01, 0x5a, 0x41, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x74, 0x73,
	0x75, 0x6e, 0x61, 0x6d, 0x69, 0x2d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2d, 0x73,
	0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x73, 0x75,
	0x6e, 0x61, 0x6d, 0x69, 0x5f, 0x67, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_software_proto_rawDescOnce sync.Once
	file_software_proto_rawDescData []byte
)

func file_software_proto_rawDescGZIP() []byte {
	file_software_proto_rawDescOnce.Do(func() {
		file_software_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_software_proto_rawDesc), len(file_software_proto_rawDesc)))
	})
	return file_software_proto_rawDescData
}

var file_software_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_software_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_software_proto_goTypes = []any{
	(Version_VersionType)(0),        // 0: tsunami.proto.Version.VersionType
	(VersionRange_Inclusiveness)(0), // 1: tsunami.proto.VersionRange.Inclusiveness
	(*Version)(nil),                 // 2: tsunami.proto.Version
	(*VersionRange)(nil),            // 3: tsunami.proto.VersionRange
	(*VersionSet)(nil),              // 4: tsunami.proto.VersionSet
	(*Software)(nil),                // 5: tsunami.proto.Software
}
var file_software_proto_depIdxs = []int32{
	0, // 0: tsunami.proto.Version.type:type_name -> tsunami.proto.Version.VersionType
	2, // 1: tsunami.proto.VersionRange.min_version:type_name -> tsunami.proto.Version
	1, // 2: tsunami.proto.VersionRange.min_version_inclusiveness:type_name -> tsunami.proto.VersionRange.Inclusiveness
	2, // 3: tsunami.proto.VersionRange.max_version:type_name -> tsunami.proto.Version
	1, // 4: tsunami.proto.VersionRange.max_version_inclusiveness:type_name -> tsunami.proto.VersionRange.Inclusiveness
	2, // 5: tsunami.proto.VersionSet.versions:type_name -> tsunami.proto.Version
	3, // 6: tsunami.proto.VersionSet.version_ranges:type_name -> tsunami.proto.VersionRange
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_software_proto_init() }
func file_software_proto_init() {
	if File_software_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_software_proto_rawDesc), len(file_software_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_software_proto_goTypes,
		DependencyIndexes: file_software_proto_depIdxs,
		EnumInfos:         file_software_proto_enumTypes,
		MessageInfos:      file_software_proto_msgTypes,
	}.Build()
	File_software_proto = out.File
	file_software_proto_goTypes = nil
	file_software_proto_depIdxs = nil
}
