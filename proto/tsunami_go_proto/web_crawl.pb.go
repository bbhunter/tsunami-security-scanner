//
// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Data models for the web crawler.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.21.12
// source: web_crawl.proto

package tsunami_go_proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Next ID: 7
type CrawlConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Starting points of a web crawl.
	// Required.
	SeedingUrls []string `protobuf:"bytes,1,rep,name=seeding_urls,json=seedingUrls,proto3" json:"seeding_urls,omitempty"`
	// The maximum depth of a web crawl.
	// Required.
	MaxDepth int32 `protobuf:"varint,2,opt,name=max_depth,json=maxDepth,proto3" json:"max_depth,omitempty"`
	// Allowed crawling scopes.
	// Optional. When empty, scopes are autogenerated from seeding_urls.
	Scopes []*CrawlConfig_Scope `protobuf:"bytes,3,rep,name=scopes,proto3" json:"scopes,omitempty"`
	// Whether crawling scope check should be enforced.
	// Optional.
	ShouldEnforceScopeCheck bool `protobuf:"varint,5,opt,name=should_enforce_scope_check,json=shouldEnforceScopeCheck,proto3" json:"should_enforce_scope_check,omitempty"`
	// The network endpoint to be crawled.
	// Required.
	NetworkEndpoint *NetworkEndpoint `protobuf:"bytes,6,opt,name=network_endpoint,json=networkEndpoint,proto3" json:"network_endpoint,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CrawlConfig) Reset() {
	*x = CrawlConfig{}
	mi := &file_web_crawl_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CrawlConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrawlConfig) ProtoMessage() {}

func (x *CrawlConfig) ProtoReflect() protoreflect.Message {
	mi := &file_web_crawl_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrawlConfig.ProtoReflect.Descriptor instead.
func (*CrawlConfig) Descriptor() ([]byte, []int) {
	return file_web_crawl_proto_rawDescGZIP(), []int{0}
}

func (x *CrawlConfig) GetSeedingUrls() []string {
	if x != nil {
		return x.SeedingUrls
	}
	return nil
}

func (x *CrawlConfig) GetMaxDepth() int32 {
	if x != nil {
		return x.MaxDepth
	}
	return 0
}

func (x *CrawlConfig) GetScopes() []*CrawlConfig_Scope {
	if x != nil {
		return x.Scopes
	}
	return nil
}

func (x *CrawlConfig) GetShouldEnforceScopeCheck() bool {
	if x != nil {
		return x.ShouldEnforceScopeCheck
	}
	return false
}

func (x *CrawlConfig) GetNetworkEndpoint() *NetworkEndpoint {
	if x != nil {
		return x.NetworkEndpoint
	}
	return nil
}

type CrawlTarget struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The URL pointing to the document.
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// HTTP method to reach the url. Value must be in all upper case, like "GET".
	HttpMethod string `protobuf:"bytes,2,opt,name=http_method,json=httpMethod,proto3" json:"http_method,omitempty"`
	// An optional HTTP request body sent to the crawl URL.
	HttpRequestBody []byte `protobuf:"bytes,3,opt,name=http_request_body,json=httpRequestBody,proto3" json:"http_request_body,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CrawlTarget) Reset() {
	*x = CrawlTarget{}
	mi := &file_web_crawl_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CrawlTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrawlTarget) ProtoMessage() {}

func (x *CrawlTarget) ProtoReflect() protoreflect.Message {
	mi := &file_web_crawl_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrawlTarget.ProtoReflect.Descriptor instead.
func (*CrawlTarget) Descriptor() ([]byte, []int) {
	return file_web_crawl_proto_rawDescGZIP(), []int{1}
}

func (x *CrawlTarget) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *CrawlTarget) GetHttpMethod() string {
	if x != nil {
		return x.HttpMethod
	}
	return ""
}

func (x *CrawlTarget) GetHttpRequestBody() []byte {
	if x != nil {
		return x.HttpRequestBody
	}
	return nil
}

// Represents an HTTP header.
type HttpHeader struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value         string                 `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HttpHeader) Reset() {
	*x = HttpHeader{}
	mi := &file_web_crawl_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HttpHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpHeader) ProtoMessage() {}

func (x *HttpHeader) ProtoReflect() protoreflect.Message {
	mi := &file_web_crawl_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpHeader.ProtoReflect.Descriptor instead.
func (*HttpHeader) Descriptor() ([]byte, []int) {
	return file_web_crawl_proto_rawDescGZIP(), []int{2}
}

func (x *HttpHeader) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *HttpHeader) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type CrawlResult struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The target visited by the crawler.
	CrawlTarget *CrawlTarget `protobuf:"bytes,1,opt,name=crawl_target,json=crawlTarget,proto3" json:"crawl_target,omitempty"`
	// Depth at which the target was visited.
	CrawlDepth int32 `protobuf:"varint,2,opt,name=crawl_depth,json=crawlDepth,proto3" json:"crawl_depth,omitempty"`
	// Response code from the crawled target.
	ResponseCode int32 `protobuf:"varint,3,opt,name=response_code,json=responseCode,proto3" json:"response_code,omitempty"`
	// Content type of the resource served at the crawl target.
	ContentType string `protobuf:"bytes,4,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	// The content of the resource served at the crawl target.
	Content []byte `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
	// Http headers of the response
	ResponseHeaders []*HttpHeader `protobuf:"bytes,6,rep,name=response_headers,json=responseHeaders,proto3" json:"response_headers,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CrawlResult) Reset() {
	*x = CrawlResult{}
	mi := &file_web_crawl_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CrawlResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrawlResult) ProtoMessage() {}

func (x *CrawlResult) ProtoReflect() protoreflect.Message {
	mi := &file_web_crawl_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrawlResult.ProtoReflect.Descriptor instead.
func (*CrawlResult) Descriptor() ([]byte, []int) {
	return file_web_crawl_proto_rawDescGZIP(), []int{3}
}

func (x *CrawlResult) GetCrawlTarget() *CrawlTarget {
	if x != nil {
		return x.CrawlTarget
	}
	return nil
}

func (x *CrawlResult) GetCrawlDepth() int32 {
	if x != nil {
		return x.CrawlDepth
	}
	return 0
}

func (x *CrawlResult) GetResponseCode() int32 {
	if x != nil {
		return x.ResponseCode
	}
	return 0
}

func (x *CrawlResult) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *CrawlResult) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *CrawlResult) GetResponseHeaders() []*HttpHeader {
	if x != nil {
		return x.ResponseHeaders
	}
	return nil
}

// The crawler should only interact with web resources under certain scopes.
type CrawlConfig_Scope struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The domain of the scope, only URLs that are on the same domain or a
	// subdomain will be admitted for crawling. Domain might include a port.
	// Required.
	Domain string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	// The path of the scope, only URLs that are under the same path will be
	// admitted for crawling.
	// Optional. When empty, all URLs under the same domain are allowed,
	// regardless of the paths.
	Path          string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CrawlConfig_Scope) Reset() {
	*x = CrawlConfig_Scope{}
	mi := &file_web_crawl_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CrawlConfig_Scope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrawlConfig_Scope) ProtoMessage() {}

func (x *CrawlConfig_Scope) ProtoReflect() protoreflect.Message {
	mi := &file_web_crawl_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrawlConfig_Scope.ProtoReflect.Descriptor instead.
func (*CrawlConfig_Scope) Descriptor() ([]byte, []int) {
	return file_web_crawl_proto_rawDescGZIP(), []int{0, 0}
}

func (x *CrawlConfig_Scope) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *CrawlConfig_Scope) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

var File_web_crawl_proto protoreflect.FileDescriptor

var file_web_crawl_proto_rawDesc = string([]byte{
	0x0a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0d, 0x74, 0x73, 0x75, 0x6e, 0x61, 0x6d, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x0d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xca, 0x02, 0x0a, 0x0b, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x21, 0x0a, 0x0c, 0x73, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x55, 0x72,
	0x6c, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x44, 0x65, 0x70, 0x74, 0x68, 0x12,
	0x38, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x74, 0x73, 0x75, 0x6e, 0x61, 0x6d, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x72, 0x61, 0x77, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x63, 0x6f, 0x70,
	0x65, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x73, 0x68, 0x6f,
	0x75, 0x6c, 0x64, 0x5f, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x73,
	0x68, 0x6f, 0x75, 0x6c, 0x64, 0x45, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x53, 0x63, 0x6f, 0x70,
	0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x49, 0x0a, 0x10, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x74, 0x73, 0x75, 0x6e, 0x61, 0x6d, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x52, 0x0f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x1a, 0x33, 0x0a, 0x05, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x22, 0x6c, 0x0a, 0x0b,
	0x43, 0x72, 0x61, 0x77, 0x6c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1f, 0x0a,
	0x0b, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x68, 0x74, 0x74, 0x70, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x2a,
	0x0a, 0x11, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x62,
	0x6f, 0x64, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x68, 0x74, 0x74, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x22, 0x34, 0x0a, 0x0a, 0x48, 0x74,
	0x74, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x95, 0x02, 0x0a, 0x0b, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x3d, 0x0a, 0x0c, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x73, 0x75, 0x6e, 0x61, 0x6d, 0x69,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x52, 0x0b, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x44, 0x65, 0x70, 0x74, 0x68,
	0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x44, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74,
	0x73, 0x75, 0x6e, 0x61, 0x6d, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x74, 0x74,
	0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x42, 0x6f, 0x0a, 0x18, 0x63, 0x6f, 0x6d, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x73, 0x75, 0x6e, 0x61, 0x6d, 0x69, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x42, 0x0e, 0x57, 0x65, 0x62, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x50, 0x01, 0x5a, 0x41, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x74, 0x73, 0x75, 0x6e, 0x61, 0x6d,
	0x69, 0x2d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2d, 0x73, 0x63, 0x61, 0x6e, 0x6e,
	0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x73, 0x75, 0x6e, 0x61, 0x6d, 0x69,
	0x5f, 0x67, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
})

var (
	file_web_crawl_proto_rawDescOnce sync.Once
	file_web_crawl_proto_rawDescData []byte
)

func file_web_crawl_proto_rawDescGZIP() []byte {
	file_web_crawl_proto_rawDescOnce.Do(func() {
		file_web_crawl_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_web_crawl_proto_rawDesc), len(file_web_crawl_proto_rawDesc)))
	})
	return file_web_crawl_proto_rawDescData
}

var file_web_crawl_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_web_crawl_proto_goTypes = []any{
	(*CrawlConfig)(nil),       // 0: tsunami.proto.CrawlConfig
	(*CrawlTarget)(nil),       // 1: tsunami.proto.CrawlTarget
	(*HttpHeader)(nil),        // 2: tsunami.proto.HttpHeader
	(*CrawlResult)(nil),       // 3: tsunami.proto.CrawlResult
	(*CrawlConfig_Scope)(nil), // 4: tsunami.proto.CrawlConfig.Scope
	(*NetworkEndpoint)(nil),   // 5: tsunami.proto.NetworkEndpoint
}
var file_web_crawl_proto_depIdxs = []int32{
	4, // 0: tsunami.proto.CrawlConfig.scopes:type_name -> tsunami.proto.CrawlConfig.Scope
	5, // 1: tsunami.proto.CrawlConfig.network_endpoint:type_name -> tsunami.proto.NetworkEndpoint
	1, // 2: tsunami.proto.CrawlResult.crawl_target:type_name -> tsunami.proto.CrawlTarget
	2, // 3: tsunami.proto.CrawlResult.response_headers:type_name -> tsunami.proto.HttpHeader
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_web_crawl_proto_init() }
func file_web_crawl_proto_init() {
	if File_web_crawl_proto != nil {
		return
	}
	file_network_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_web_crawl_proto_rawDesc), len(file_web_crawl_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_web_crawl_proto_goTypes,
		DependencyIndexes: file_web_crawl_proto_depIdxs,
		MessageInfos:      file_web_crawl_proto_msgTypes,
	}.Build()
	File_web_crawl_proto = out.File
	file_web_crawl_proto_goTypes = nil
	file_web_crawl_proto_depIdxs = nil
}
