//
// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Data models for all the reconnaissance information gathered by Tsunami.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.21.12
// source: reconnaissance.proto

package tsunami_go_proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Detailed information about the scanning target.
type TargetInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// All the known network endpoints of the scanning target.
	NetworkEndpoints       []*NetworkEndpoint      `protobuf:"bytes,1,rep,name=network_endpoints,json=networkEndpoints,proto3" json:"network_endpoints,omitempty"`
	OperatingSystemClasses []*OperatingSystemClass `protobuf:"bytes,2,rep,name=operating_system_classes,json=operatingSystemClasses,proto3" json:"operating_system_classes,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *TargetInfo) Reset() {
	*x = TargetInfo{}
	mi := &file_reconnaissance_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TargetInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TargetInfo) ProtoMessage() {}

func (x *TargetInfo) ProtoReflect() protoreflect.Message {
	mi := &file_reconnaissance_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TargetInfo.ProtoReflect.Descriptor instead.
func (*TargetInfo) Descriptor() ([]byte, []int) {
	return file_reconnaissance_proto_rawDescGZIP(), []int{0}
}

func (x *TargetInfo) GetNetworkEndpoints() []*NetworkEndpoint {
	if x != nil {
		return x.NetworkEndpoints
	}
	return nil
}

func (x *TargetInfo) GetOperatingSystemClasses() []*OperatingSystemClass {
	if x != nil {
		return x.OperatingSystemClasses
	}
	return nil
}

// Represents a ForOperatingSystem annotation placeholder used by the
// PluginDefinition proto above.
// For possible values, consult the following database:
// https://raw.githubusercontent.com/nmap/nmap/master/nmap-os-db
type OperatingSystemClass struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The type of the target operating system, e.g. "general purpose"
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// The vendor of the target operating system, e.g. "Linux"
	Vendor string `protobuf:"bytes,2,opt,name=vendor,proto3" json:"vendor,omitempty"`
	// The family of the target operating system, e.g. "Linux"
	OsFamily string `protobuf:"bytes,3,opt,name=os_family,json=osFamily,proto3" json:"os_family,omitempty"`
	// The generation of the target operating system, e.g. "2.6.X"
	OsGeneration string `protobuf:"bytes,4,opt,name=os_generation,json=osGeneration,proto3" json:"os_generation,omitempty"`
	// The estimated accuracy of the target operating system, e.g. 90
	Accuracy      uint32 `protobuf:"varint,5,opt,name=accuracy,proto3" json:"accuracy,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OperatingSystemClass) Reset() {
	*x = OperatingSystemClass{}
	mi := &file_reconnaissance_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OperatingSystemClass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperatingSystemClass) ProtoMessage() {}

func (x *OperatingSystemClass) ProtoReflect() protoreflect.Message {
	mi := &file_reconnaissance_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperatingSystemClass.ProtoReflect.Descriptor instead.
func (*OperatingSystemClass) Descriptor() ([]byte, []int) {
	return file_reconnaissance_proto_rawDescGZIP(), []int{1}
}

func (x *OperatingSystemClass) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *OperatingSystemClass) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *OperatingSystemClass) GetOsFamily() string {
	if x != nil {
		return x.OsFamily
	}
	return ""
}

func (x *OperatingSystemClass) GetOsGeneration() string {
	if x != nil {
		return x.OsGeneration
	}
	return ""
}

func (x *OperatingSystemClass) GetAccuracy() uint32 {
	if x != nil {
		return x.Accuracy
	}
	return 0
}

// Report from a port scanner.
type PortScanningReport struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Information about the scanning target.
	TargetInfo *TargetInfo `protobuf:"bytes,1,opt,name=target_info,json=targetInfo,proto3" json:"target_info,omitempty"`
	// List of all the exposed network services.
	NetworkServices []*NetworkService `protobuf:"bytes,2,rep,name=network_services,json=networkServices,proto3" json:"network_services,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *PortScanningReport) Reset() {
	*x = PortScanningReport{}
	mi := &file_reconnaissance_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PortScanningReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortScanningReport) ProtoMessage() {}

func (x *PortScanningReport) ProtoReflect() protoreflect.Message {
	mi := &file_reconnaissance_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortScanningReport.ProtoReflect.Descriptor instead.
func (*PortScanningReport) Descriptor() ([]byte, []int) {
	return file_reconnaissance_proto_rawDescGZIP(), []int{2}
}

func (x *PortScanningReport) GetTargetInfo() *TargetInfo {
	if x != nil {
		return x.TargetInfo
	}
	return nil
}

func (x *PortScanningReport) GetNetworkServices() []*NetworkService {
	if x != nil {
		return x.NetworkServices
	}
	return nil
}

// Report from a service fingerprinter.
type FingerprintingReport struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of all the identified network services after fingerprinting.
	NetworkServices []*NetworkService `protobuf:"bytes,3,rep,name=network_services,json=networkServices,proto3" json:"network_services,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *FingerprintingReport) Reset() {
	*x = FingerprintingReport{}
	mi := &file_reconnaissance_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FingerprintingReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FingerprintingReport) ProtoMessage() {}

func (x *FingerprintingReport) ProtoReflect() protoreflect.Message {
	mi := &file_reconnaissance_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FingerprintingReport.ProtoReflect.Descriptor instead.
func (*FingerprintingReport) Descriptor() ([]byte, []int) {
	return file_reconnaissance_proto_rawDescGZIP(), []int{3}
}

func (x *FingerprintingReport) GetNetworkServices() []*NetworkService {
	if x != nil {
		return x.NetworkServices
	}
	return nil
}

// Full reconnaissance report about a single scanning target.
type ReconnaissanceReport struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Information about the scanning target.
	TargetInfo *TargetInfo `protobuf:"bytes,1,opt,name=target_info,json=targetInfo,proto3" json:"target_info,omitempty"`
	// All exposed network services of the scanning target.
	NetworkServices []*NetworkService `protobuf:"bytes,2,rep,name=network_services,json=networkServices,proto3" json:"network_services,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ReconnaissanceReport) Reset() {
	*x = ReconnaissanceReport{}
	mi := &file_reconnaissance_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReconnaissanceReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReconnaissanceReport) ProtoMessage() {}

func (x *ReconnaissanceReport) ProtoReflect() protoreflect.Message {
	mi := &file_reconnaissance_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReconnaissanceReport.ProtoReflect.Descriptor instead.
func (*ReconnaissanceReport) Descriptor() ([]byte, []int) {
	return file_reconnaissance_proto_rawDescGZIP(), []int{4}
}

func (x *ReconnaissanceReport) GetTargetInfo() *TargetInfo {
	if x != nil {
		return x.TargetInfo
	}
	return nil
}

func (x *ReconnaissanceReport) GetNetworkServices() []*NetworkService {
	if x != nil {
		return x.NetworkServices
	}
	return nil
}

var File_reconnaissance_proto protoreflect.FileDescriptor

var file_reconnaissance_proto_rawDesc = string([]byte{
	0x0a, 0x14, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x73, 0x73, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x74, 0x73, 0x75, 0x6e, 0x61, 0x6d, 0x69, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb8, 0x01, 0x0a, 0x0a,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4b, 0x0a, 0x11, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x73, 0x75, 0x6e, 0x61, 0x6d, 0x69, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x10, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x45, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x5d, 0x0a, 0x18, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x73, 0x75, 0x6e,
	0x61, 0x6d, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x16,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x22, 0xa0, 0x01, 0x0a, 0x14, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6f,
	0x73, 0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6f, 0x73, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x73, 0x5f, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x6f, 0x73, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x22, 0x9a, 0x01, 0x0a, 0x12, 0x50, 0x6f,
	0x72, 0x74, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x3a, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x73, 0x75, 0x6e, 0x61, 0x6d, 0x69, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x48, 0x0a, 0x10,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x73, 0x75, 0x6e, 0x61, 0x6d, 0x69,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x0f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x22, 0x60, 0x0a, 0x14, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x48,
	0x0a, 0x10, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x73, 0x75, 0x6e, 0x61,
	0x6d, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x0f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x22, 0x9c, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x63,
	0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x73, 0x73, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x73, 0x75, 0x6e, 0x61, 0x6d, 0x69,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x48, 0x0a,
	0x10, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x73, 0x75, 0x6e, 0x61, 0x6d,
	0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x0f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x42, 0x75, 0x0a, 0x18, 0x63, 0x6f, 0x6d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x73, 0x75, 0x6e, 0x61, 0x6d, 0x69, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x42, 0x14, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x73, 0x73, 0x61,
	0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x50, 0x01, 0x5a, 0x41, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x74,
	0x73, 0x75, 0x6e, 0x61, 0x6d, 0x69, 0x2d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2d,
	0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x73,
	0x75, 0x6e, 0x61, 0x6d, 0x69, 0x5f, 0x67, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_reconnaissance_proto_rawDescOnce sync.Once
	file_reconnaissance_proto_rawDescData []byte
)

func file_reconnaissance_proto_rawDescGZIP() []byte {
	file_reconnaissance_proto_rawDescOnce.Do(func() {
		file_reconnaissance_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_reconnaissance_proto_rawDesc), len(file_reconnaissance_proto_rawDesc)))
	})
	return file_reconnaissance_proto_rawDescData
}

var file_reconnaissance_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_reconnaissance_proto_goTypes = []any{
	(*TargetInfo)(nil),           // 0: tsunami.proto.TargetInfo
	(*OperatingSystemClass)(nil), // 1: tsunami.proto.OperatingSystemClass
	(*PortScanningReport)(nil),   // 2: tsunami.proto.PortScanningReport
	(*FingerprintingReport)(nil), // 3: tsunami.proto.FingerprintingReport
	(*ReconnaissanceReport)(nil), // 4: tsunami.proto.ReconnaissanceReport
	(*NetworkEndpoint)(nil),      // 5: tsunami.proto.NetworkEndpoint
	(*NetworkService)(nil),       // 6: tsunami.proto.NetworkService
}
var file_reconnaissance_proto_depIdxs = []int32{
	5, // 0: tsunami.proto.TargetInfo.network_endpoints:type_name -> tsunami.proto.NetworkEndpoint
	1, // 1: tsunami.proto.TargetInfo.operating_system_classes:type_name -> tsunami.proto.OperatingSystemClass
	0, // 2: tsunami.proto.PortScanningReport.target_info:type_name -> tsunami.proto.TargetInfo
	6, // 3: tsunami.proto.PortScanningReport.network_services:type_name -> tsunami.proto.NetworkService
	6, // 4: tsunami.proto.FingerprintingReport.network_services:type_name -> tsunami.proto.NetworkService
	0, // 5: tsunami.proto.ReconnaissanceReport.target_info:type_name -> tsunami.proto.TargetInfo
	6, // 6: tsunami.proto.ReconnaissanceReport.network_services:type_name -> tsunami.proto.NetworkService
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_reconnaissance_proto_init() }
func file_reconnaissance_proto_init() {
	if File_reconnaissance_proto != nil {
		return
	}
	file_network_proto_init()
	file_network_service_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_reconnaissance_proto_rawDesc), len(file_reconnaissance_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_reconnaissance_proto_goTypes,
		DependencyIndexes: file_reconnaissance_proto_depIdxs,
		MessageInfos:      file_reconnaissance_proto_msgTypes,
	}.Build()
	File_reconnaissance_proto = out.File
	file_reconnaissance_proto_goTypes = nil
	file_reconnaissance_proto_depIdxs = nil
}
